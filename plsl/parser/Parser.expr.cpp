/*
 * Microsoft Public License (Ms-PL) - Copyright (c) 2020 Sean Moss
 * This file is subject to the terms and conditions of the Microsoft Public License, the text of which can be found in
 * the 'LICENSE' file at the root of this repository, or online at <https://opensource.org/licenses/MS-PL>.
 */

#include "./Parser.hpp"

#define VISIT_FUNC(type) antlrcpp::Any Parser::visit##type(grammar::PLSL::type##Context* ctx)


namespace plsl
{

// ====================================================================================================================
VISIT_FUNC(PostfixExpr)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(PrefixExpr)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(FactorExpr)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(NegateExpr)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(MulDivModExpr)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(AddSubExpr)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(ShiftExpr)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(RelationalExpr)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(EqualityExpr)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(BitwiseExpr)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(LogicalExpr)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(TernaryExpr)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(IndexAtom)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(SwizzleAtom)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(MemberAtom)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(CallAtom)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(LiteralAtom)
{
	return nullptr;
}

// ====================================================================================================================
VISIT_FUNC(NameAtom)
{
	return nullptr;
}

} // namespace plsl
