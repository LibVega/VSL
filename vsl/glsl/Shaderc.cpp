/*
 * Microsoft Public License (Ms-PL) - Copyright (c) 2020-2021 Sean Moss
 * This file is subject to the terms and conditions of the Microsoft Public License, the text of which can be found in
 * the 'LICENSE' file at the root of this repository, or online at <https://opensource.org/licenses/MS-PL>.
 */

#include "./Shaderc.hpp"

#include <shaderc/shaderc.hpp>

#include <fstream>


namespace vsl
{

// ====================================================================================================================
Shaderc::Shaderc(const CompilerOptions* options, const Generator* generator)
	: compiler_{ std::make_shared<shaderc::Compiler>() }
	, options_{ options }
	, generator_{ generator }
	, lastError_{ }
	, stages_{ }
	, bytecodes_{ }
{

}

// ====================================================================================================================
Shaderc::~Shaderc()
{

}

// ====================================================================================================================
bool Shaderc::compileStage(ShaderStages stage)
{
	const auto stageName = ShaderStageToStr(stage);

	// Get the stage string
	string source{};
	if (!generator_->getStageString(stage, &source)) {
		lastError_ = { CompilerStage::Compile, "Invalid stage for compilation - stage not found" };
		return false;
	}

	// For now, just save the output
	std::ofstream sourceFile{ "./vsl." + stageName };
	sourceFile << source << std::endl;

	// Create the compiler options
	shaderc::CompileOptions opts{};
	opts.SetOptimizationLevel(shaderc_optimization_level_performance);
	opts.SetTargetSpirv(shaderc_spirv_version_1_0);

	// Perform the compilation
	const auto skind =
		(stage == ShaderStages::Vertex) ? shaderc_vertex_shader :
		(stage == ShaderStages::TessControl) ? shaderc_tess_control_shader :
		(stage == ShaderStages::TessEval) ? shaderc_tess_evaluation_shader :
		(stage == ShaderStages::Geometry) ? shaderc_geometry_shader : shaderc_fragment_shader;
	const auto result = compiler_->CompileGlslToSpv(
		source,
		skind,
		"VSLC",
		"main",
		opts
	);

	// Check and report result
	if (result.GetCompilationStatus() != shaderc_compilation_status_success) {
		lastError_ = { CompilerStage::Compile, result.GetErrorMessage() };
		return false;
	}

	// Save the generated bytecode
	auto& bytecode = (bytecodes_[stage] = {});
	bytecode.insert(bytecode.end(), result.begin(), result.end());
	std::ofstream bcFile{ "./vsl." + stageName + ".spv", std::ofstream::binary };
	bcFile.write(reinterpret_cast<const char*>(bytecode.data()), bytecode.size() * sizeof(uint32));

	// Report success
	stages_ |= stage;
	return true;
}

} // namespace vsl
