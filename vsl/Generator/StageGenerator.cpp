/*
 * Microsoft Public License (Ms-PL) - Copyright (c) 2020-2021 Sean Moss
 * This file is subject to the terms and conditions of the Microsoft Public License, the text of which can be found in
 * the 'LICENSE' file at the root of this repository, or online at <https://opensource.org/licenses/MS-PL>.
 */

#include "./StageGenerator.hpp"
#include "../Shader.hpp"

#include <fstream>


namespace vsl
{

// ====================================================================================================================
static const string CRLF{ "\r\n" };


// ====================================================================================================================
StageGenerator::StageGenerator(ShaderStages stage)
	: stage_{ stage }
	, source_{ }
{

}

// ====================================================================================================================
StageGenerator::~StageGenerator()
{

}

// ====================================================================================================================
void StageGenerator::generate(const FuncGenerator& func, const ShaderInfo& info)
{
	// Generate header
	source_
		<< "/// This file was generated by vslc, do not edit" << CRLF
		<< "#version 450" << CRLF
		<< "#extension GL_EXT_scalar_block_layout : require" << CRLF
		<< CRLF;

	// Write function text
	source_ << func.source().str();
}

// ====================================================================================================================
bool StageGenerator::save(const CompileOptions& options)
{
	if (!options.saveIntermediate()) {
		return true;
	}

	// Open file
	const auto stage = ShaderStageToStr(stage_);
	std::ofstream file{ 
		mkstr("%s.%s.glsl", options.outputFile().c_str(), stage.c_str()), 
		std::ofstream::trunc | std::ofstream::binary
	};
	if (!file.is_open()) {
		return false;
	}

	// Write file
	file << source_.str();
	file.flush();
	return true;
}

} // namespace vsl
